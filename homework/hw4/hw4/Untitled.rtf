{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 note:\
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f1\fs22 \cf0 \CocoaLigature0    \cf2 //make a boolean needIngredients = false\cf0 \
    \cf2 //make a std::list<Ingredient> ingredientsNeeded\cf0 \
    \cf2 //make a s\cf0 \
    \cf2 //\cf0 \
    \cf2 //iterate through the recipes list, compare the iterator.getName() to name\cf0 \
    \cf2 //now iterate through that recipe's ingredients list itr\cf0 \
    \cf2 //within that iteration loop, iterate through the kitchen's ingredients list jtr\cf0 \
    \cf2 //when you find the two ingredients with the same name\cf0 \
    \cf2 //check to see if recipe ingredients list iterator.getQuantity < kitchen.getQuantity\cf0 \
    \cf2 //if it is\cf0 \
    \cf2 //output, could not make recipe iterator.getName(), need\cf0 \
    \cf2 //if(itr.getQuantity() <2)\cf0 \
    \cf2 // ostr << 1 unit of << itr.getName()\cf0 \
    \cf2 //else\cf0 \
    \cf2 //ostr << itr.getQuantity() << units of << itr.getName()\cf0 \
    \cf2 //(kitchen ingredients list iterator.getQuantity - recipe ingredients list iterator.getQuantity)\cf0 \
    \cf2 // (*itr).getName()\cf0 \
    \cf2 //this will continue for all of the items in the list since it is a multi line output\cf0 \
    \cf2 //needIngredients = true;\cf0 \
    \cf2 //otherwise\cf0 \
    \cf2 //add that iterator object to the ingredientsNeeded list\cf0 \
    \cf2 // use kitchen.incrementQuantity(-(*iterator).getQuantity())\cf0 \
    \cf2 // but what if we subtract the quantity we needed from the kitchen and the next ingredient we need more of?\cf0 \
    \cf2 //would ordering the items in the ingredients list by quantity in both kitchen and recipe list solve this problem?\cf0 \
    \cf2 //not necessarily, because what if there are a lot of ingredients in the kitchen of one ingredient\cf0 \
    \cf2 //but we need a small amount of that ingredient in our recipe, while we need a lot of\cf0 \
    \cf2 //another ingredient that there isn't as much of\cf0 \
    \cf2 //this means we need to loop twice. once to check if there are enough ingredients, and once more\cf0 \
    \cf2 //to subtract those ingredients from the kitchen\cf0 \
    \cf2 //\cf0 \
    \cf2 // so, lastly... if(needIngredients == False), iterate through ingredientsNeeded, within that iteration\cf0 \
    \cf2 //iterate through kitchen ingredients\cf0 \
    \cf2 //if ingredientsNeeded.getName() == kitchenIngredients.getName()\cf0 \
    \cf2 // (kitchen_list_iterator).iterateQuantity(-(*ktr).getQuantity())\cf0 \
    \cf2 // ostr << "made" << recipe.getName()\cf0 \
}